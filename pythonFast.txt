idle快捷键:
	alt+n/alt+p: 查看历史命令：上一条/下一条
	ctrl+f6: 重启shell，以前定义的变量全部失效
	f1:打开帮助文档
	alt+/:自动补全前面曾经出现过的单词
	ctrl+[ / ctrl+]: 缩进代码和取消缩进
	alt+m: 打开模块代码，先选中模块，然后按下此键，会帮你打开该模块的py源码供浏览
	alt+c:打开类浏览器，方便在源码文件中的各个方法体之间切换
	f5: 运行程序

字符串(和Java中一样，字符串是常量不可变):
		1、python中可以创建多行字符串，用''' '''或""" """表示，内容写在中间
		2、python中字符串单引号内可以直接用双引号，反之亦可
		3、ord()将单个字符转换为Unicode码，chr()反之
		4、空字符串允许存在，len()可以查询字符串长度
		5、转义字符:菜鸟教程上有
		6、可将多个字符串放在一起自动拼接，有无+号都可以
		7、使用*号可以复制字符串,eg:'sxt'*3 等于'sxtsxtsxt'
		8、不换行打印,修改print()中的end参数，默认为\n
		9、str()将其他类型转为字符串，与前面的int("2"),float('2.0')类似
		10、使用[]提取字符，a[index],相当于字符数组0=<index<a.len(),index>0时正向走，index<0时反向走
		11、replace()实现字符串替换,eg:a='abc',a.replace('b','B')
		12、字符串切片slice操作：菜鸟教程上看
		13、split()分割字符串,join()连接字符串。注意:join()效率比拼接高,列表可变而字符串不可变，拼接一次即产生一个对象，而join()只产生一个对象
		14、字符串驻留机制，当符合字符串命名规则的字符串对象会启用字符串驻留机制
		15、可变字符串
		16、格式化,用format()来代替原来的%用法
			1> 填充与对齐：eg:{1:*^8},冒号后面第一个为填充,< ^ >分别为左对齐，居中，右对齐,8为一共占8位
			2> 数字格式化，浮点数通过f,整数通过d,常用格式上网搜即可。 eg:"我的存款有{1:2f}"

基本运算：
			1、python中关系运算符可以连用 eg:3<a<10
			2、+号还可以用来列表、元组等合并 eg：[10,20] + [2,3] ==> [10,20,2,3]
			3、*号是复制含义，可以字符串复制，也可以列表复制
			4、python没有自增自减 i++,i--，要用i+=1,i-=1代替

列表(基本语法[]创建,通过list()创建;range()创建整数序列；推倒式生成列表):
			1、range([start],end,[step])创建整数序列
			2、列表增加删除
				1> append()方法,推荐:在尾部增加元素
				2> +运算操作符,像字符串一样，没拼接一次即产生新对象，不推荐使用
				3> extend(),将目标列表添加到末尾
				4> insert(index,value)
				5> 乘法扩展 eg:a*3
			3、列表元素删除
				1> del a[index]
				2> pop(),eg:a.pop(index)并返回删除对象,默认删除最后位置元素
				3> remove(value)删除首次出现的指定元素
			4、列表元素访问和计数
				1> 通过索引访问
				2> index(value,[start],[end])获得获得元素首次出现的索引位置,start,end制定了搜索范围
				3> count(value)获得指定元素出现次数
				4> len()
			5、可以用in判断列表中是否存在某元素,和字符串一样,也可使用count()返回值判断
			6、切片操作,几乎和字符串一米一样
			7、列表排序:
				1> 不产生新对象:a.sort()默认升序,a.sort(reverse=True)降序,import random, random.shuffle(a)打乱顺序
				2> 产生新对象:调用内置函数a=sorted(a)，默认升序;sorted(a,reverse=True)
				3> reversed()返回迭代器:可以通过list(iterater)返回列表，且只能用一次(功能是倒置列表)
			8、max(),min(),sum()
			9、多维列表

元组(基本语法()创建,tuple()创建)(不可修改)
			1、基本语法创建时小括号可以省略
			2、tuple(obj)
			3、通过索引访问也是用方括号,也可用切片访问
			4、因为元组不可改变，所以无法通过sort()排序,只能通过内之函数sorted(tuple1)进行排序(重新创建了一个对象，并没有改变原来的)
			5、元组不能增删改，但可以拼接,因为拼接是产生新的对象
			6、zip(list1,list2,...),将多个列表对象压缩，再用list强转，可以将其变为列表对象
			7、生成器推导式创建元组(和iterater一样,只能访问一次)
		note:	1>元组核心特点是不可变序列
				2>元组访问和处理速度比列表快
				3>与整数和字符串一样,元组可以作为字典的键,因为它们都是不可变的

字典(键值对的无序可变序列)	注意:字典是无序的，无序的，无序的！！！
			1、通过{},dict()创建对象
			2、通过zip()创建字典对象 eg:c = dict(zip(k,v))(k,v为自己创建的列表对象)
			3、通过fromkeys创建值为空的字典对象 eg:a = dict.fromkeys(["name","age","address"])
			4、字典元素的访问
				1> 通过键获得值a["name"]
				2> 通过get(key,[default])方法获得值(推荐使用,不会报异常)
			5、列出所有键值对: a.items()
			6、a.keys(),a.values()
			7、len()
			8、检测一个键是否在字典中 eg:"name" in a
			9、字典元素增删改
				1> 基本语法增或改 a[name] = "李逍遥"
				2>使用update()将新字典所有键值对全部添加到旧字典,如有重复则覆盖
				3>删除,和列表差不多 eg del(a["name"]),pop(a["name"]),clear()删除所有
				4>popitem(),随机删除和返回该键值对
			10、序列解包：方便我们对多个变量赋值。序列解包用于字典时，默认是对"键"进行操作,若要对值进行解包用s.values(),对键值对进行解包时用s.items()
 		note:	1> 字典的核心底层结构,看视频(其实就是将key值哈希去二进制结果再取最右边三位数字的偏移量(这三个偏移量称为散列值)(散列值有重复的话向左偏移三位))
				2> 数字，字符串，元组都是可散列的
				3> 字典是典型的用空间换时间
				4> 键查询速度快	
				5> 切记不要在遍历字典时同时进行修改，由于字典核心底层结构，可能改变字典顺序
				
集合(无序可变，元素不能重复，集合底层是字典实现，集合中所有元素其实就是字典中的键对象)				
			1、使用{}创建集合，并用add()方法添加元素
			2、set()函数强转,和前面那些相似
			3、remove()删除指定元素,clear()清空
		***	4、集合相关操作(并集，交集，差集)	
		
循环语句中的else: 当循环正常结束时会打印else语句块,而循环被break打破时不执行。

循环代码的优化:
			1、尽量减少循环内部不必要的计算
			2、尽量减少循环嵌套层数
			3、局部变量查询尽快,尽量使用局部变量
			
使用zip()进行并行迭代：
	#测试并行迭代zip()
	names = ("李逍遥","赵灵儿","林月如")
	ages = (20,17,19)
	addresses = ("余杭镇","仙灵岛","林家堡")
	for name,age,address in zip(names,ages,addresses):
    print("{0} - {1} - {2}".format(name,age,address))

推导式创建序列:
			列表推导式:[表达式 for item in 可迭代对象] 或 列表推导式:[表达式 for item in 可迭代对象 if 条件判断] eg:[()]
			
全局变量和局部变量:(函数调用时会在栈中创建一个栈帧,局部变量会在栈帧中,函数调用结束后栈帧会被移除)
	1> 全局变量降低了函数的通用性和可读性，尽量避免使用
	2> 函数内不可以调用全局变量,但是要改变全局变量的值,需要使用global关键字声明一下(这里和java中有区别)
	
python中一切皆对象,所有复制操作都是"引用的赋值",所以python中参数的传递都是引用传递，不是“值传递”
			1、对“可变对象”进行写操作，直接作用于原对象本身
			2、对"不可变对象"进行写操作,会产生一个新的对象空间,并用新值填充这个空间(相当于其他语言中的值传递)
			注意，不可变对象传的还是对象的引用，在赋值时，由于不可变对象无法修改，系统会创建一个新对象，所以只是看起来像值传递
			
* 浅拷贝与深拷贝:(一定要练一下)
			1、浅拷贝：只拷贝引用,不拷贝对象(相当于只拷贝自己一代)
			2、深拷贝：都拷贝，且修改时不改变原对象(相当于不仅拷贝了自己，还拷贝了子孙后代)
			注意：传递不可变对象时进行复制操作时用的是浅拷贝。
			
参数类型:
			1、位置参数(最普通的)
			2、默认值参数(设置默认值,注意一定要放在普通参数后面,否则无法识别)
			3、命名参数(通过参数名字进行传递)
			4、可变参数:(元组，字典两种参数)
				1> *param(一个星号)，将多个参数收集到一个元组中
				2> **param(两个星号)，将多个参数收集到一个字典中
			5、强制命名参数:如果可变参数后面还有参数,必须用命名方式赋值

lambda表达式和匿名函数：
			1、lambda表达式可用来声明匿名函数。lambda函数是一种简单的，在同一行中定义函数的方法。
			2、lambda表达式只允许包含一个表达式，不能包含复杂语句，该表达式计算结果就是函数返回值
			3、函数的基本语法：f = lambda a,b,c:a+b+c
			
eval()函数(将字符串当成有效的表达式计算并返回结果):
			1、语法：eval(source[,globals[,locals]) 
				source: 一个python表达式或函数compile()返回的代码对象
				globals: 可选,必须是dictionary
				locals:任意映射对象
				
内部函数用法:
			1、封装-数据隐藏：外部无法访问“嵌套函数”
			2、贯彻DRY(don't Repeat Yourself):可以让我们在函数内部避免重复代码
			3、闭包(后面会讲)
			
LEGB规则: python在查找变量名称时遵循的规则.

类是个模具：方法是所有对象共享,实例对象中value存放的方法是模具中方法的地址
实例属性-内存分析
实例方法和函数区别:实例方法有self，函数没有
			s1.sayScore()#这是程序员的写法
			Student.sayScore(s1)#这是解释器的调用方法,也是实例对象方法的调用本质
			1、dir(obj)可获得对象的所有属性和方法
			2、obj.__dict__对象的属性字典
			3、pass 空语句
			4、isInstance(obj, type), 判断对象是否是指定类型。
			
类对象(模具本身):实际当解释器执行到class语句是就会创建一个类对象
			1、type是python中一个重要的类型(模具类):通过模具类创造模具,比如:class Student即根据模具类创建学生模具
			
类属性和类方法:
			1、通过__init__()赋值的属性是实例属性，直接在类里声明的属性是类属性，类属性可以被实例对象共享
			2、实例属性是属于实例对象的,类属性是属于类对象的
			3、类方法是从属于类对象的方法: 类方法通过装饰器@classmethod来定义, 格式如下:
				@classmethod
				def 类方法名(cls [,形参列表])
			4、cls指的是类对象本身(classself)。参数列表中，不需要也不要给cls传值
			5、类方法中访问实例属性的实例方法会导致错误,就像Java中普通方法调用static修饰的方法一样
			6、子类继承父类方法时,传入cls时子类对象而非父类对象
			7、python中允许定义与"类对象"无关的方法,称为静态方法,和类方法的区别在于静态方法一般不才做类的属性(其实区别不大)
			8、类方法和静态方法中不能调用实例属性和方法(内存分析一目了然)\
			
__del__()方法(析构函数)和垃圾回收机制:python实现自动垃圾回收,当对象的引用技术为0时，由垃圾回收机制调用__del__()方法,一般情况下我们不需要重写__del__()方法
		1、程序结束后会自动调用__del__()方法
		
__call__()方法和可调用对象:
	定义了__call__()方法的对象，称为"可调用对象",即该对象可想函数那样调用, 当我们以obj()方式调用时实际上是调用__call__()方法
		#测试可调用方法
		# class SalaryAccount:
		#     def __call__(self, salary):
		#         print("算工资了 ")
		#         yearSalary = salary*12
		#         daySalary = salary/27.5
		#         hourSalary = daySalary/8
		#         return dict(yearSalary=yearSalary, daySalary=daySalary, hourSalary=hourSalary)
		# sa = SalaryAccount()
		# print(sa(3000).get("daySalary"))
		
		
python中方法没有重载(没必要)

方法的动态性:python是动态语言，我们可以动态的为类添加新方法，或者动态修改类已有的方法
				#测试方法的动态性
				# class Person:
				#     def work(self):
				#         print("努力学习")
				#
				# def play_game(self,name):
				#     print("{0}在玩游戏".format(name))
				#
				# def work_hard(self):
				#     print("好好学习, 天天向上")
				#
				# Person.play = play_game
				# p = Person()
				# p.work()
				# p.play("李逍遥") #相当于Person.play(p,"李逍遥")
				# Person.work = work_hard
				# p.work()
				# Person.play( p, "赵灵儿")

私有属性和私有方法(实现封装):
		Python对类的成员没有严格的访问控制限制，这与其他面向对象的语言有区别。关于私有属性和私有方法与如下几点
				1、通常我们约定两个下划线开头的属性是私有属性(private)。其他的为公共的(public)
				2、类内部可以访问私有属性(方法
				3、类外部不能直接访问私有属性(方法)
				4、类外部可以通过"_类名__私有属性(方法)名"访问私有属性(方法)
					#class Employee:
					# 
					#     __company = "四海兴唐"
					#     def __init__(self, name, age):
					#         self.name = name
					#         self.__age = age
					# 
					#     def __work(self):
					#         print("好好学习， 将来bat")
					#         print("年龄:{0}".format(self.__age))
					#         print(Employee.__company)
					# 
					# e = Employee("李逍遥", 20)
					# # print(e.name +"\t"+ str(e._Employee__age))
					# # print(e.__dict__)
					# e._Employee__work()
					# print(e.__dir__())
					# print(Employee._Employee__company)
			

			
@property装饰类:
				#@property最简化的使用
				class Employee:

					def __init__(self, name, salary):
						self.__name = name
						self.__salary = salary

					@property
					def salary(self):
						return self.__salary

					@salary.setter
					def salary(self, salary):
						if 1000 < salary < 300000:
							self.__salary = salary
						else:
							print("录入错误")
				'''
					def get_salary(self):
						return self.__salary

					def set_salary(self, salary):
						if 1000<salary<300000:
							self.__salary = salary
						else:
							print("录入错误")
				'''


				e = Employee("李逍遥",30000)
				e.salary = 10000
				print(e.salary)
			
			
继承(对于私有的方法和属性虽然已经继承,但不能直接用):Python支持多重继承,这点和Java不一样
		格式:
			class 子类(父类1[,父类2,...])
				pass
		object是所有类的父类,定义了许多公共方法, eg: __new__(), __init__()		

方法的重写：和Java几乎一样
重写__str__()方法：相当于重写Java中的toString方法
super():获得父类定义 eg:super().父类属性(方法)
多态: 一般用于子类重写父类的方法
特殊方法和运算符重载，特殊属性(都是object中的方法和属性)
对象的深拷贝与浅拷贝
组合和继承: 
			1、继承: is-a 的关系
			2、has-a的关系，场景不同使用不同
			
设计模式: GOF(Goup Of Four)23种设计模式: 初学者入门工厂模式和单例模式
			1、工厂模式:
				#设计模式—工厂模式(实现创建者和调用者分离)
				class CarFactory:
					def create_car(self, brand):
						if brand == "Benz":
							return Benz()
						elif brand == "BWM":
							return BWM()
						elif brand == "BYD":
							return BYD()
						else:
							return "未知品牌，无法创建"

				class Benz:
					def __str__(self):
						return "奔驰"

				class BWM:
					def __str__(self):
						return "宝马"

				class BYD:
					def __str__(self):
						return "比亚迪"

				factory = CarFactory()
				c1 = []
				c1.append(factory.create_car("Benz"))
				c1.append(factory.create_car("BWM"))
				c1.append(factory.create_car("BYD"))
				c1.append(factory.create_car("BBYD"))
				for car in c1:
					print(car)

			2、单例模式(减少对系统的资源开销):核心作用时确保一个类只有一个实例，并且提供一个访问该实例的全局访问点
			#设计模式--单例模式实现
			class MySingleton:
				__obj = None   #将对象放在这里

				def __new__(cls, *args, **kwargs):
					if cls.__obj == None:
						cls.__obj = object.__new__(cls)
						return cls.__obj
					else:
						return "对象已经存在"

				def __init__(self, name):
					print("init...")
					self.name = name

				def __str__(self):
					return "my name is {0}".format(self.name)

			a = MySingleton("aa")
			b = MySingleton("bb")
			c = MySingleton("cc")
			print(a)
			print(b)
			print(c)
			
			
			
小甲鱼: 魔法属性(数学运算符，赋值，标识符，容器等底层实现函数的重写):
	0、文件操作模块：os、pickle(泡菜,用于将序列等对象存入文件中，而不仅仅时字符串)
	1、只要进行赋值操作就会调用__setattr__()方法
	2、重写方法是尽量调用基类的方法
	3、标识符(定义自己百度)：
		#利用标识符实现摄氏度华氏度的转换
		class Celsuit:
			 def __init__(self, value = 26.0):
				 self.value = float(value)

			 def __get__(self, instance, owner):
				 return self.value

			 def __set__(self, instance, value):
				 self.value = float(value)

		class Fahrenheit:
			def __get__(self, instance, owner):
				return instance.cel * 1.8 + 32

			def __set__(self, instance, value):
				instance.cel = (float(value) - 32)/1.8

		class Templature:
			cel = Celsuit()
			fah = Fahrenheit()

		t = Templature()
		t.cel = 30
		print(t.fah)
		4、自定义容器,记录容器每个元素的被访问次数
		#定义一个不可变列表， 记录它每个元素的被访问次数
		class CountList:
			def __init__(self, *args):
				self.values = [x for x in args]
				self.count = {}.fromkeys(range(len(self.values)), 0)

			def __len__(self):
				return len(self.values)

			def __getitem__(self, item):
				self.count[item] += 1
				return self.values[item]

			def __str__(self):
				return "{0}".format([index for index in self.values])

		c1 = CountList(1, 3, 5, 7, 9)
		c2 = CountList(2, 4, 6, 8, 10)
		print(c1[1] + c2[2])
		print(c1.count)
		print(c2.count)
		5、迭代器(iter(), next()):for循环原理就是先获得序列的迭代器(__iter__魔法方法),在用while True循环next()即__next__魔法方法
			序列.iter(), next(迭代器)
		#利用迭代器实现斐波那契数列(重写__iter__()和__next__()魔法方法)
			class Fibs:

				def __init__(self):
					self.a = 0;
					self.b = 1;

				def __iter__(self):
					return self

				def __next__(self):
					self.a, self.b = self.b, self.a + self.b
					if self.a <= 10000:
						return self.a
					else:
						raise StopIteration

			fibs = Fibs()
			for f in fibs:
				print(f)
				
		6、生成器(yield和return的区别是return是结束返回而yield是暂时挂起,生成器其实就是迭代器，没有特殊的魔法属性):利用生成器实现斐波那契数列
		# #利用生成器实现斐波那契数列
			def fibs():
					a = 1
					b = 1
					while a < 10000:
						yield a
						a, b = b, a+b

				for f in fibs():
					print(f)
					
		7、python3不仅有列表推导式,还有字典和集合推导式,与列表推导式类似
		8、模块：容器-> 数据的封装
				 函数-> 语句的封装
				 类	 -> 方法和属性的封装
				 模块-> 一个python文件, 即一个.py文件的封装。
			导入：1> 使用import引入模块, 调用模块时要使用命名空间 import namespace
				  2> from namespace	import 函数名
				  3>  import namespace as alisa
				  
		9、	1> 主程序测试 __name__ = __main__, 当在主程序下测试时__name__返回值为__main__, 当模块被调用时__name__值为模块名
			2> 搜索路径 import sys, sys.path可现实存放模块路径
			3> 包:(要在文件夹下添加__init__模块)
			
		10、如何独立探索模块 https://pypi.python.org/pypi -> python第三方库社区
		11、论一只爬虫的自我修养
			1、python如何访问互联网: urllib模块：
				import urllib.request
				html = urllib.request.urlopen("http://www.fishc.com")
				html1 = html.decode("utf-8")
				print(html1)
			2、实战：
				1> 用python来下载一只猫
					#下载猫的图片到文件中
					import urllib.request as ur
					response = ur.urlopen("http://placekitten.com/g/500/600") #这个其实是通过url字符串获得Request对象,再根据Request对象查找内容
					cat_img = response.read()
					with open("E:\\pythonDoc\\cat_500_600.jpg", "wb") as f:
						f.write(cat_img)
					
					print(response.geturl())//获取路径
					print(response.info())//获取header信息
					print(response.getcode())//获取http请求状态
				2> 用有道词典来翻译文本:
					#一个简单的爬虫爬有道词典
					# import urllib.request
					# import urllib.parse
					# import json
					# url = "http://fanyi.youdao.com/translate?smartresult=dict&smartresult=rule"
					# data = {}
					# data["i"] = "我爱你，塞北的雪"
					# data["from"] = 'AUTO'
					# data["to"] = 'AUTO'
					# data["smartresult"] = "dict"
					# data["client"] = "fanyideskweb"
					# data["salt"] = "1537412862967"
					# data["sign"] = "d1b3aef91d8f0b5888f11ac77f93769f"
					# data["doctype"] = "json"
					# data["version"] = "2.1"
					# data["keyfrom"] = "fanyi.web"
					# data["action"] = "FY_BY_REALTIME"
					# data["typoResult"] = "false"
					# response = urllib.request.urlopen(url, urllib.parse.urlencode(data).encode("utf-8"))
					# html = response.read().decode("utf-8")
					# res = json.loads(html)
					# print(res["translateResult"][0][0]["tgt"])
				
				3> 隐藏: 隐藏自己的访问方式，让服务器以为是普通浏览器访问
					(修改User-Agent让隐藏访问代码)
					1: 通过Request的headers参数修改
					2：通过Request.add_header()方法动态叠加:
						import urllib.request
						import urllib.parse
						import json

						context = input("请输入要翻译的内容")
						url = "http://fanyi.youdao.com/translate?smartresult=dict&smartresult=rule"
						data = {}
						data["i"] = context
						data["from"] = 'AUTO'
						data["to"] = 'AUTO'
						data["smartresult"] = "dict"
						data["client"] = "fanyideskweb"
						data["salt"] = "1537412862967"
						data["sign"] = "d1b3aef91d8f0b5888f11ac77f93769f"
						data["doctype"] = "json"
						data["version"] = "2.1"
						data["keyfrom"] = "fanyi.web"
						data["action"] = "FY_BY_REALTIME"
						data["typoResult"] = "false"
						req = urllib.request.Request(url, urllib.parse.urlencode(data).encode("utf-8"))
						req.add_header("User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.75 Safari/537.36")
						response = urllib.request.urlopen(req)
						print(req.headers)
						html = response.read().decode("utf-8")
						res = json.loads(html)
						print("结果为\n\t{0}".format(res["translateResult"][0][0]["tgt"]))
					(使用延迟或代理解决一个ip频繁访问服务器的问题)
					代理步骤
						1、参数是一个字典{"类型":"代理ip:端口号"}
							proxy_support = urllib.request.ProxyHandler({})
						2、定制，创建一个opener
							opener = urllib.request.bulid_opener(proxy_support)
						3a、安装opener(一劳永逸)：
							urllib.request.install_opener(opener)
						3b、调用opener:
							opener.open(url)
								#用代理ip爬虎扑
								import urllib.request
								url = "https://www.hupu.com/"
								proxy_support = urllib.request.ProxyHandler({"http": "115.154.43.242:8123"})
								opener = urllib.request.build_opener(proxy_support)
								opener.addheaders = [('User-Agent',  "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.75 Safari/537.36")]
								html = opener.open(url)
								print(html.read().decode("utf-8"))
								
			3、正则表达式：
				1> 元字符(好多)：. :匹配除了换行符之外所有字符
				2> 反斜杠\：具有剥夺元字符的能力， 还可以使普通字符拥有特殊能力：\d 可以匹配任何数字
				3> 匹配字符类：[] eg:[aeiouAEIOU],[a-z]
				4> 限定重复匹配的字数:{} eg:print(re.search(r"ab{3,10}c", "abbbbbbbbc"))
				5> 匹配0~255：print(re.search(r"[01]\d\d| 2[0-4]\d|25[0-5]", "197"))注意|左右不能有空格	
				6> 正则表达式中()代表组
				7> 匹配ip地址:  print(re.search(r"(([01]{0,1}\d{0,1}\d|2[0-4]\d|25[0-5])\.){3}[01]{0,1}\d{0,1}\d|2[0-4]{0,1}\d|25[0-5]", "192.168.1.1"))
				8> 非贪婪模式(默认情况下是贪婪模式): 在表示重复的标志后面加“?”
				9> 编译正则表达式: p = re.compile(), 此时p是模式对象
					p = re.compile(r"[A-Z]")
					print(p.findall("I love FishC"))
					结果:['I', 'F', 'C']
				10> 编译标志:ASCII/A(\w,\b,\s和\d只能匹配ASCII字符), DOTALL/S(开启后.可匹配任何字符), ..., VERBOSE(详细的正则表达式)
				
			4、异常处理：在urllib.error下, 有URLError, HTTPError, 这之中HTTPError包含于URLError
				#捕获异常
				import urllib.request
				import urllib.error
				req = urllib.request.Request("http://www.fishc.com/ooxx.html")
				try:
					urllib.request.urlopen(req)
				except urllib.error.HTTPError as e:
					print(e.code)
					print(e.read())
					
			5、Scrapy: Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。可以应用在包括数据挖掘，信息处理或存储历史数据等一系列程序中
				四个步骤：1> 创建一个Scrapy项目
						  2> 定义Item容器
						  3> 编写爬虫
						  4> 存储内容
						  
	    12、Tkinter: 
				1、一个简单的窗口:
					import tkinter as tk
					app = tk.Tk()
					app.title("FishC.demo")
					theLable = tk.Label(app, text = "我的第一个窗口程序") # 用于显示文本,图标图片等
					theLable.pack()#自动调节窗口尺寸
					app.mainloop()
					
				2、Tkinter两大标签和框架: lable、button和Frame
					from tkinter import  *
					root = Tk()

					#例子1
					# def callBack():
					#     var.set("骗人,我才不信呢")
					# 
					# fram1 = Frame(root)
					# fram2 = Frame(root)
					# #textvariable设置tkinter变量字符串
					# var = StringVar()
					# var.set("您所下载的影片含有未成年人限制内容\n请满18周岁以后再点击")
					# textLable = Label(fram1, textvariable = var, justify = LEFT)
					# textLable.pack(side = LEFT)
					# 
					# photo = PhotoImage(file="E:\\triGrades\\ubuntu\\pics\\blue-lowerleft.png")
					# imgLable = Label(fram1, image = photo)
					# imgLable.pack(side = RIGHT)
					# 
					# theButton = Button(fram2, text = "我已满十八周岁", command = callBack)
					# theButton.pack()
					# fram1.pack(padx = 10, pady = 10)
					# fram2.pack(padx = 10, pady = 10)

					#例子2图片和文字混合
					# photo = PhotoImage(file="E:\\triGrades\\ubuntu\\pics\\blue-lowerleft.png")
					# theLabel = Label(root, text = "学Python到FishC", justify = LEFT, image = photo,
					#                  compound = CENTER, font = ("隶书", 20), fg = "green")
					# theLabel.pack()

					mainloop()
				
				3、tkinter标签CheckButton,Radiobutton和LabelFrame框架
					#checkbotton
					# GIRLS = ["西施", "貂蝉", "王昭君", "杨玉环"]
					# v = []
					# for girl in GIRLS:
					#     v.append(IntVar())
					#     b = Checkbutton(root, text = girl, variable = v[-1])
					#     b.pack(anchor = "w")#左对齐

					#Radiobutton
					# LANGS =[
					#     ("Python", 1),
					#     ("Perl", 2),
					#     ("Ruby", 3),
					#     ("Lua", 4)]
					# v = IntVar()
					# # v.set(1)
					#
					# for lang, num in LANGS:
					#     Radiobutton(root, text = lang, value = num, variable = v, indicatoron = False).pack(fill = "x")

					#Labelfram标签框架
					l = LabelFrame(root, text="最好的脚本语言是?", padx=5, pady=5)
					l.pack(padx=10, pady=10)
					LANGS =[
						("Python", 1),
						("Perl", 2),
						("Ruby", 3),
						("Lua", 4)]
					v = IntVar()
					# v.set(1)

					for lang, num in LANGS:
						Radiobutton(l, text = lang, value = num, variable = v).pack(anchor = "w")

					mainloop()
				4、输入框Entry
					#输入框Entry
					Label(root, text="账号").grid(row=0, column=0)
					Label(root, text="密码").grid(row=1, column=0)

					v1 = StringVar()
					v2 = StringVar()
					e1 = Entry(root, textvariable=v1)
					e2 = Entry(root, textvariable=v2, show="#")
					e1.grid(row=0, column=1, padx=10, pady=5)
					e2.grid(row=1, column=1, padx=10, pady=5)

					def showValue():
						print("账号: {0}and{1}".format(e1.get(), v1.get()))
						print("密码: {0}and{1}".format(e2.get(), v2.get()))
						e1.delete(0, END)
						e2.delete(0, END)

					Button(root, text="芝麻开门", command=showValue).grid(row=2, column=0, padx=10, pady=5, sticky=W)
					Button(root, text="退出", command=root.quit()).grid(row=2, column=1, padx=10, pady=5, sticky=E)

					mainloop()
					1> 关于验证的详解validate, validatecommand, invalidatecommand
						# 一个加法计算器
						frame = Frame(root)
						frame.pack(padx=10, pady=10)


						def digit(content):
							return str(content).isdigit()


						v1 = StringVar()
						v2 = StringVar()
						v3 = StringVar()

						#### 当validate="key"时不能用textvariable进行验证,当validatecommand返回True时textvariable才会被赋值
						Entry(frame, width=10,  textvariable=v1, validate="key"\
							  , validatecommand=(digit, "%P")).grid(row=0, column=0)

						Label(frame, text="+").grid(row=0, column=1)

						Entry(frame, width=10,  textvariable=v2, validate="key"\
							  , validatecommand=(digit, "%P")).grid(row=0, column=2)

						Label(frame, text="=").grid(row=0, column=3)

						Entry(frame, width=10, textvariable=v3, validate="key"\
							  , validatecommand=(digit, "%P"), state="readonly").grid(row=0, column=4, pady=10)


						def cal_c():
							v3.set(float(v1.get()) + float(v2.get()))


						Button(frame, width=14, text="计算", command=cal_c).grid(row=1, column=2, pady=10)
						
				5、Listbox、Scrollbar和Scale
					1> 需要设置ListBox中yscrollbarcommand选项为Scrollbar组件的set()方法
					2> 设置Scrollbar组件的command选项为该组件的yview()方法
						#ListBox和Scrollbar
						sb = Scrollbar(root)
						sb.pack(side=RIGHT, fill=Y)

						lb = Listbox(root, yscrollcommand=sb.set)
						for i in range(100):
							lb.insert(END, i)
						lb.pack()
						sb.config(command=lb.yview)
					3> Scale
						# # Scale
						# frame = Frame(root)
						# frame.pack(padx=10)
						# v = StringVar()
						# s1 = Scale(frame, from_=0, to=100, tickinterval=10, resolution=5, length=200)
						# s1.pack(side=RIGHT)
						# Label(frame, textvariable=v).pack(pady=20)
						# s2 = Scale(frame, from_=0, to=100, tickinterval=10, length=200, orient=HORIZONTAL)
						# s2.pack(side=BOTTOM)
						# v.set("\n坐标为:\t({0},{1})".format(s2.get(), s1.get()))
						#
						#
						# def show():
						#     v.set("\n坐标为:\t({0},{1})".format(s2.get(), s1.get()))
						#
						#
						# Button(root, text="显示位置", command=show).pack(side=BOTTOM, pady=10)
						
				6、强大的text组件
					1> text初入门
						# 强大的Text组件(注意: 行号以1开始, 列以0开始 eg:1.0 代表的是第一行第一列)
						text = Text(root, width=60, height=30)
						text.pack()
						text.insert(INSERT, "i love \n")
						text.insert(END, "fishC.com")
						photo = PhotoImage(file="E:\\triGrades\\signSystem\\images\\20180331161725.png")


						def show():
							print("哟, 我被点了一下")
							text.image_create(END, image=photo)  # 插入image对象


						b1 = Button(text, text="点我点我!", command=show)
						text.window_create(INSERT, window=b1)  # text中插入其它组建
					2> index索引和marks组件(程序先不写, 以后再说)
					3> tags(标签): 通常用于改变Text组件中内容的样式和功能(贼多):
						# tags(标签)
						text = Text(root, width=30, height=5)
						text.pack()

						text.insert(INSERT, "i love fishC.com")
						#
						# text.tag_add("tag1", 1.7, 1.12, 1.14, 1.16)
						# text.tag_add("tag2", 1.7, 1.12, 1.14, 1.16)
						# text.tag_config("tag1", background="yellow", foreground="red")
						# text.tag_config("tag2", foreground="green")  # tag是以栈的形式存储的,后进去的会覆盖前进去的
						#
						# text.tag_lower("tag2")  # 降低tag2优先级
						# text.tag_add("link", 1.7, 1.16)  # 加入标记
						# text.tag_config("link", foreground="blue", underline=True)  # 配置标记
						#
						#
						# def show_arrow_cursor(event):
						#     text.config(cursor="arrow")
						#
						#
						# def show_xterm_cursor(event):
						#     text.config(cursor="xterm")
						#
						#
						# def click(event):
						#     text.config(cursor="xterm")
						#     webbrowser.open("http://bbs.fishc.com")
						#
						#
						# text.tag_bind("link", "<Enter>", show_arrow_cursor)  # 标记功能--鼠标进入
						# text.tag_bind("link", "<Leave>", show_xterm_cursor)  # 标记功能--鼠标离开
						# text.tag_bind("link", "<Button-1>", click)  # 标记功能--左键点击

						# 检查内容是否发生变动， 在用户未保存时使用
						# contents = text.get(1.0, END)
						#
						#
						# def get_sign(content):
						#     return hashlib.md5(content.encode()).digest()  # 获得摘要
						#
						#
						# sign = get_sign(contents)
						#
						#
						# def check():
						#     if get_sign(text.get(1.0, END)) != sign:
						#         print("警告：内容发生变动")
						#     else:
						#         print("风平浪静")
						#
						#
						# Button(root, text="检查", command=check).pack()

						# 全文搜索
						# start = "1.0"
						#
						#
						# def get_index(text, index):
						#     return tuple(map(int, str.split(text.index(index), ".")))  # 变成位置坐标
						#
						#
						# while True:
						#     pos = text.search("o", start, stopindex=END)
						#     print(pos)
						#     if not pos:
						#         break
						#     print("找到啦，位置是: {0}".format(get_index(text, pos)))
						#     start = pos + "+1char"  # 指向下一个字符

						# 恢复，撤销(撤销其实是弹栈的操作)
						# text = Text(root, width=30, height=5, undo=True, autoseparators=False)  # undo开启撤销恢复功能,autoseperators控制系统是否自动插入分隔符
						# text.pack()
						#
						# text.insert(INSERT, "i love fishC.com")
						#
						#
						# def call_back(e):
						#     text.edit_separator()  # 一旦按键即插入分隔符
						#
						#
						# text.bind("<Key>", call_back)
						#
						#
						# def show():
						#     text.edit_undo()
						#
						#
						# Button(root, text="撤销", command=show).pack()
						mainloop()
						
				7、canvas(画布)组件
					from tkinter import *
					import math as m

					root = Tk()

					w = Canvas(root, width=200, height=100)
					w.pack()

					# line1 = w.create_line(0, 0, 200, 100, fill="blue")
					# line2 = w.create_line(0, 100, 200, 0, fill="red")
					# rec = w.create_rectangle(40, 20, 160, 80, fill="green")
					# rec = w.create_rectangle(65, 35, 135, 65, fill="yellow")
					# w.create_text(100, 50, text="FishC")
					#
					# # w.coords(line1, 0, 25, 200, 25)
					# # w.itemconfig(line2, fill="gray")
					#
					# Button(root, text="删除全部", command=lambda x=ALL: w.delete(x)).pack(side=BOTTOM)

					# 画椭圆
					# w.create_rectangle(40, 20, 160, 80, dash=(4, 4))
					# w.create_oval(70, 20, 130, 80, fill="pink")
					# w.create_text(100, 50, text="袁博")

					# 画多边形(五角星)
					# center_x = 100
					# center_y = 50
					# r = 50
					# 
					# points = [
					#     # 左上点
					#     center_x - int(r * m.sin(m.pi * 2/5)),
					#     center_y - int(r * m.cos(m.pi * 2/5)),
					#     # 右上点
					#     center_x + int(r * m.sin(m.pi * 2/5)),
					#     center_y - int(r * m.cos(m.pi * 2/5)),
					#     # 左下点
					#     center_x - int(r * m.sin(m.pi/5)),
					#     center_y + int(r * m.cos(m.pi/5)),
					#     # 顶点
					#     center_x,
					#     center_y - r,
					#     # 右下点
					#     center_x + int(r * m.sin(m.pi / 5)),
					#     center_y + int(r * m.cos(m.pi / 5)),
					# ]
					# 
					# w.create_polygon(points, outline="green", fill="")  # fill=""代表透明
					
				8、菜单Menu(自己练习): *(星号的打包与解包)
				9、事件
				10、一些不重要的组件
				11、tkinter的布局管理器(pack, grid, place)
				12、标准对话框(messagebox, filedialog, colorchooser)相当于html的弹出框
		
		13、pygame
				1、安装pygame
				2、第一个程序
					import pygame
					import sys

					# 初始化pygame
					pygame.init()

					size = width, height = 600, 600  # 自动打包成元组
					speed = [2, 1]
					bg = (255, 255, 255)  # RGB颜色

					# 创建指定大小的窗口 返回Surface对象
					screen = pygame.display.set_mode(size)

					# 设置窗口标题
					pygame.display.set_caption("初次见面，请大家多多关照")

					# 加载图片 同样返回Surface对象
					turtle = pygame.image.load("H:\\c_pic\\pygame\\timg.jpg")

					# 获得图像的位置矩形
					position = turtle.get_rect()

					while True:
						for event in pygame.event.get():
							if event.type == pygame.QUIT:
								sys.exit()

						# 移动图像
						position = position.move(speed)

						if position.left < 0 or position.right > width:
							# 翻转图像
							turtle = pygame.transform.flip(turtle, True, False)
							# 反方向移动
							speed[0] = -speed[0]

						if position.top < 0 or position.bottom > height:
							speed[1] = -speed[1]

						# 填充背景
						screen.fill(bg)
						# 更新图片
						screen.blit(turtle, position)
						# 更新界面(pygame使用双缓冲漠视, 将内存中的数据加载到屏幕中)
						pygame.display.flip()
						# 延迟
						pygame.time.delay(5)
				
				3、什么是Surface对象: pygame中表示图像的对象
				4、如何提高pygame的颜值：
				5、pygame基本过程: 
					# 初始化pygame
					pygame.init()
					
					# 创建指定大小的窗口 返回Surface对象
					screen = pygame.display.set_mode(size)

					# 设置窗口标题
					pygame.display.set_caption("初次见面，请大家多多关照")
					
					# 加载图片 同样返回Surface对象
					turtle = pygame.image.load("H:\\c_pic\\pygame\\timg.jpg")
					
					# 获得图像的位置矩形
					position = pygame.Rect(turtle.get_rect())
					
					# 填充背景
					screen.fill(bg)
					
					# 更新图片
					screen.blit(turtle, position)
					
					# 更新界面(pygame使用双缓冲漠视, 将内存中的数据加载到屏幕中)
					pygame.display.flip()
					
					# 延迟
					# pygame.time.delay(5)
					clock.tick(100)